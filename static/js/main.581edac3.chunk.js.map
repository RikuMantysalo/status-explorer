{"version":3,"sources":["Components/FlexCenter.tsx","Components/MainHeader.tsx","Components/SubHeader.tsx","Components/LoadingSpinner.tsx","Views/FrontPage/FrontPage.tsx","config.tsx","Views/PackageDetails/PackageDetails.tsx","App.tsx","index.tsx"],"names":["FlexCenter","styled","div","MainHeader","h1","SubHeader","h2","LoadingSpinner","useState","isVisible","setIsVisible","useEffect","timer","setTimeout","clearTimeout","Spinner","display","viewBox","className","cx","cy","r","fill","strokeWidth","svg","List","ul","Container","main","ListItem","li","StickyContainer","ErrorContainer","Header","FrontPage","packageNames","error","length","message","sort","map","pkg","key","to","API_URL","process","SeparatedList","SeparatedListItem","type","ShortDescription","strong","LongDescription","p","DetailsContainer","stripVersionNumber","dependency","replace","Navigation","PackageDetails","packageName","useParams","setPkg","loading","setLoading","setError","a","fetch","json","packageData","fetchData","document","title","isDependedOn","Boolean","dependedOnBy","hasDependencies","dependsOn","shortDescription","longDescription","dep","includes","name","App","setPackageNames","data","exact","path","GlobalStyle","createGlobalStyle","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.581edac3.chunk.js","sourcesContent":["import styled from 'styled-components'\n\nexport const FlexCenter = styled.div`\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n`;","import styled from 'styled-components'\n\nexport const MainHeader = styled.h1`\n    font-size: 2em;\n    font-weight: 600;\n    margin: 8px 0px;\n`;","import styled from \"styled-components\";\n\nexport const SubHeader = styled.h2`\n    font-weight: 600;\n    font-size: 1.5rem;\n    margin: 8px 0px;\n    font-family: Arial, Helvetica, sans-serif;\n`;","import React, { useState, useEffect } from \"react\";\nimport styled from \"styled-components\";\n\nexport const LoadingSpinner = () => {\n  const [isVisible, setIsVisible] = useState(false)\n\n  // Wait 150ms before showing the spinner to avoid flickering.\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      setIsVisible(true)\n    }, 150);\n    return clearTimeout(timer)\n  }, [])\n\n  return (\n  <Spinner display={isVisible ? 'inherit' : 'none'} viewBox=\"0 0 50 50\">\n    <circle\n      className=\"path\"\n      cx=\"25\"\n      cy=\"25\"\n      r=\"20\"\n      fill=\"none\"\n      strokeWidth=\"2\"\n    />\n  </Spinner>\n  )\n};\n\nconst Spinner = styled.svg`\n  animation: rotate 1s linear infinite;\n  width: 50px;\n  height: 50px;\n\n  & .path {\n    stroke: #5652bf;\n    stroke-linecap: round;\n    animation: dash 1.5s ease-in-out infinite;\n  }\n\n  @keyframes rotate {\n    100% {\n      transform: rotate(360deg);\n    }\n  }\n  @keyframes dash {\n    0% {\n      stroke-dasharray: 1, 150;\n      stroke-dashoffset: 0;\n    }\n    50% {\n      stroke-dasharray: 90, 150;\n      stroke-dashoffset: -35;\n    }\n    100% {\n      stroke-dasharray: 90, 150;\n      stroke-dashoffset: -124;\n    }\n  }\n`;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport styled from 'styled-components';\nimport { FlexCenter } from '../../Components/FlexCenter';\nimport { MainHeader } from '../../Components/MainHeader';\nimport { SubHeader } from '../../Components/SubHeader';\nimport { LoadingSpinner } from '../../Components/LoadingSpinner';\n\ntype FrontPageProps = {\n    packageNames: string[];\n    error?: Error;\n};\n\nconst List = styled.ul`\n    list-style-type: none;\n    text-align: center;\n`;\n\nconst Container = styled.main`\n    margin-top: 3rem;\n`;\n\nconst ListItem = styled.li`\n    font-size: 1.3rem;\n    line-height: 1.5;\n    font-weight: 200\n    border-bottom: 1px solid #ccc;\n\n    &:last-child {\n        border: none;\n    }\n\n    a {\n        text-decoration: none;\n        display: block;\n        transition: background-color 0.3s ease;\n    }\n\n    &:hover {\n        background-color: #f4f4f4;\n    }\n`;\n\nconst StickyContainer = styled.div`\n    position: fixed;\n    top: 0;\n    background-color: white;\n    width: 100%\n    text-align: center;\n`;\n\nconst ErrorContainer = styled.div`\n    margin-top: 50px;\n`;\n\nconst Header = () => (\n    <StickyContainer>\n        <header>\n            <MainHeader>Packages</MainHeader>\n        </header>\n    </StickyContainer>\n);\n\nexport const FrontPage = ({ packageNames, error }: FrontPageProps) => {\n    if (packageNames.length === 0 && !error) {\n        return (\n            <FlexCenter>\n                <Header />\n                <Container>\n                    <LoadingSpinner />\n                </Container>\n            </FlexCenter>\n        );\n    }\n    return (\n        <FlexCenter>\n            <Header />\n            <Container>\n                {error ? (\n                    <ErrorContainer>\n                        <SubHeader>Failed to fetch packages!</SubHeader>\n                        {error.message}\n                    </ErrorContainer>\n                ) : (\n                    <List>\n                        {packageNames.sort().map(pkg => (\n                            <ListItem key={pkg}>\n                                <Link to={`packages/${pkg}`} key={pkg}>\n                                    {pkg}\n                                </Link>\n                            </ListItem>\n                        ))}\n                    </List>\n                )}\n            </Container>\n        </FlexCenter>\n    );\n};\n","export const API_URL = process.env.REACT_APP_API_URL;\n","import React, { useState, useEffect } from 'react';\nimport { useParams, Link } from 'react-router-dom';\nimport { MainHeader } from '../../Components/MainHeader';\nimport { EnrichedPackageShape } from 'api/src/services/Enricher';\nimport { API_URL } from '../../config';\nimport styled from 'styled-components';\nimport { FlexCenter } from '../../Components/FlexCenter';\nimport { SubHeader } from '../../Components/SubHeader';\nimport { LoadingSpinner } from '../../Components/LoadingSpinner';\n\ntype PackageDetailsProps = {\n    packageNames: string[];\n};\n\ntype SeparatedListItemProps = {\n    type: 'normal' | 'alternate';\n};\n\nconst SeparatedList = styled.ul`\n    list-style: none;\n\n    li:last-child:after {\n        content: '';\n    }\n`;\n\nconst SeparatedListItem = styled.li`\n    display: inline;\n    &:after {\n        content: \"${({ type }: SeparatedListItemProps) => (type === 'normal' ? ', ' : ' | ')}\";\n    }\n`;\n\nconst ShortDescription = styled.strong`\n    font-weight: 600;\n`;\n\nconst LongDescription = styled.p`\n    white-space: pre-line;\n`;\n\nconst DetailsContainer = styled.main`\n    display: flex;\n    flex-direction: column;\n`;\n\n// CRA does not allow relative imports outside of src so this is copied from\n// api/src/services/Enricher.ts\nconst stripVersionNumber = (dependency: string): string => {\n    return dependency.replace(/ *\\([^)]*\\) */g, '');\n};\n\nconst Navigation = () => (\n    <nav>\n        <Link to='/'>Back to listing</Link>\n    </nav>\n);\n\nexport const PackageDetails = ({ packageNames }: PackageDetailsProps) => {\n    const { packageName } = useParams();\n    const [pkg, setPkg] = useState<EnrichedPackageShape>();\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState<Error>();\n    useEffect(() => {\n        const fetchData = async () => {\n            try {\n                const packageData: EnrichedPackageShape = await (\n                    await fetch(`${API_URL}/api/packages/${packageName}`)\n                ).json();\n                setPkg(packageData);\n            } catch (error) {\n                setError(error);\n            } finally {\n                setLoading(false);\n            }\n        };\n\n        fetchData();\n\n        document.title = packageName ? `Package Browser | ${packageName}` : 'Package Browser';\n    }, [packageName]);\n\n    const isDependedOn = Boolean(pkg && pkg.dependedOnBy.length);\n    const hasDependencies = Boolean(pkg && pkg.dependsOn.length);\n\n    if (loading) {\n        return (\n            <div>\n                <Navigation />\n                <FlexCenter>\n                    <LoadingSpinner />\n                </FlexCenter>\n            </div>\n        );\n    } else if (error) {\n        return (\n            <div>\n                <Navigation />\n                <SubHeader>Failed to retrieve package information!</SubHeader>\n                {error.message}\n            </div>\n        );\n    }\n    return (\n        <div>\n            <Navigation />\n            {pkg && (\n                <>\n                    <FlexCenter>\n                        <header>\n                            <MainHeader>{pkg.packageName}</MainHeader>\n                        </header>\n                    </FlexCenter>\n                    <DetailsContainer>\n                        <header>\n                            <SubHeader>Description</SubHeader>\n                        </header>\n                        <ShortDescription>{pkg.shortDescription}</ShortDescription>\n                        <LongDescription>\n                            {pkg.longDescription\n                                .replace(/  +/g, ' ') // Turn 2 or more spaces in to one\n                                .replace(/\\n (?![-*])/g, '') // Remove linebreaks from non-list items\n                                .replace(/\\s\\.\\s\\n|\\s\\.\\s/g, '\\n\\n') // Replace paragraph separators with line breaks\n                            }\n                        </LongDescription>\n                        {hasDependencies && (\n                            <>\n                                <header>\n                                    <SubHeader>Depends on</SubHeader>\n                                </header>\n                                <SeparatedList>\n                                    {pkg.dependsOn.map(dep =>\n                                        packageNames.includes(stripVersionNumber(dep.name)) ? (\n                                            <SeparatedListItem key={dep.name} type={dep.type}>\n                                                <Link key={dep.name} to={`/packages/${stripVersionNumber(dep.name)}`}>\n                                                    {dep.name}\n                                                </Link>\n                                            </SeparatedListItem>\n                                        ) : (\n                                            <SeparatedListItem key={dep.name} type={dep.type}>\n                                                {dep.name}\n                                            </SeparatedListItem>\n                                        )\n                                    )}\n                                </SeparatedList>\n                            </>\n                        )}\n\n                        {isDependedOn && (\n                            <>\n                                <header>\n                                    <SubHeader>Depended on by</SubHeader>\n                                </header>\n                                <SeparatedList>\n                                    {pkg.dependedOnBy.map((dep: string) => (\n                                        <SeparatedListItem key={dep} type='normal'>\n                                            <Link key={dep} to={`/packages/${dep}`}>\n                                                {dep}\n                                            </Link>\n                                        </SeparatedListItem>\n                                    ))}\n                                </SeparatedList>\n                            </>\n                        )}\n                    </DetailsContainer>\n                </>\n            )}\n        </div>\n    );\n};\n","import React, { useState, useEffect } from \"react\";\nimport { HashRouter as Router, Switch, Route } from \"react-router-dom\";\nimport { FrontPage } from \"./Views/FrontPage/FrontPage\";\nimport { PackageDetails } from \"./Views/PackageDetails/PackageDetails\";\nimport { API_URL } from \"./config\";\n\nconst App: React.FC = () => {\n  const [packageNames, setPackageNames] = useState<string[]>([]);\n  const [error, setError] = useState();\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const packageNames = await (\n          await fetch(`${API_URL}/api/packages`)\n        ).json();\n        setPackageNames(packageNames.data);\n      } catch (error) {\n        setError(error);\n      }\n    };\n    fetchData();\n  }, []);\n\n  return (\n    <Router>\n      <Switch>\n        <Route exact path=\"/\">\n          <FrontPage error={error} packageNames={packageNames} />\n        </Route>\n        <Route path=\"/packages/:packageName\">\n          <PackageDetails packageNames={packageNames} />\n        </Route>\n        <Route>404</Route>\n      </Switch>\n    </Router>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport { Reset } from \"styled-reset\";\nimport { createGlobalStyle } from \"styled-components\";\n\nconst GlobalStyle = createGlobalStyle`\n  body {\n    font-family: Helvetica, Verdana, sans-serif;\n    color: #001F3F;\n    padding: 8px;\n    a:link {\n        color: #0074D9;\n    }\n    a:visited {\n        color: #B10DC9;\n    }\n  }\n`;\n\nif (process.env.NODE_ENV !== \"production\") {\n  import(\"react-axe\").then(axe => {\n    axe.default(React, ReactDOM, 1000);\n    ReactDOM.render(\n      <>\n        <App />\n        <Reset />\n        <GlobalStyle />\n      </>,\n      document.getElementById(\"root\")\n    );\n  });\n} else {\n  ReactDOM.render(\n    <>\n      <App />\n      <Reset />\n      <GlobalStyle />\n    </>,\n    document.getElementById(\"root\")\n  );\n}\n"],"sourceRoot":""}